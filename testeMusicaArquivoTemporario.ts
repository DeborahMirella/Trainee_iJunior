// Arquivo temporario para testes
// Ficheiro: script.ts

import { musicaController } from "./src/domains/musicas/musicaController";
import prisma from "./config/client";

// Instancia o controller que vamos testar
const controller = new musicaController();

// (no mesmo ficheiro script.ts, depois da fun√ß√£o main)

/**
 * Fun√ß√£o que executa uma sequ√™ncia de testes de erro.
 */
async function testarErros() {
  console.log("\n\n--- üöÄ INICIANDO TESTES DE CAMINHOS DE ERRO ---");
  const controller = new musicaController();

  // --- Cen√°rio 1: Tentar criar m√∫sica com dados inv√°lidos ---
  console.log("\nüß™ Teste de Erro: Criar m√∫sica sem 'nome'. Esperado: Erro.");
  // Note que o 'artistaId' aqui √© inv√°lido, mas a valida√ß√£o do nome deve ser acionada primeiro.
  await controller.criarMusica({
    nome: "",
    duracao: 180,
    artistaId: 999,
    genero: null,
    album: null,
  });

  console.log(
    "\nüß™ Teste de Erro: Criar m√∫sica com um 'artistaId' que n√£o existe. Esperado: Erro."
  );
  await controller.criarMusica({
    nome: "M√∫sica Fantasma",
    duracao: 180,
    artistaId: 999,
    genero: null,
    album: null,
  });

  // --- Cen√°rio 2: Tentar buscar dados que n√£o existem ---
  console.log(
    "\nüß™ Teste de Erro: Buscar m√∫sica com ID que n√£o existe (999). Esperado: Erro."
  );
  await controller.conseguirMusicaPorId(999);

  console.log(
    "\nüß™ Teste de Erro: Buscar m√∫sica com nome que n√£o existe ('xyz'). Esperado: Erro."
  );
  await controller.conseguirMusicasPorNome("xyz123abc");

  // --- Cen√°rio 3: Tentar atualizar uma m√∫sica que n√£o existe ---
  console.log(
    "\nüß™ Teste de Erro: Atualizar m√∫sica com ID que n√£o existe (999). Esperado: Erro."
  );
  await controller.atualizarMusica(999, { nome: "N√£o vai funcionar" });

  // --- Cen√°rio 4: Tentar deletar uma m√∫sica que n√£o existe ---
  console.log(
    "\nüß™ Teste de Erro: Deletar m√∫sica com ID que n√£o existe (999). Esperado: Erro."
  );
  await controller.deletarMusica(999);

  console.log("\n--- üèÅ TESTES DE ERRO FINALIZADOS ---");
}

async function main() {
  console.log("--- üöÄ INICIANDO SCRIPT DE TESTE ---");

  try {
    // --- 1. SETUP: CRIAR DADOS NECESS√ÅRIOS ---
    console.log("\n[SETUP] Criando um artista para o teste...");
    const artistaTeste = await prisma.artista.create({
      data: {
        nome: "As M√°quinas Pensantes",
        foto: "https://example.com/foto.jpg",
      },
    });
    console.log(
      `‚úÖ Artista de teste "${artistaTeste.nome}" criado com ID: ${artistaTeste.id}`
    );

    // --- 2. CREATE: TESTANDO A CRIA√á√ÉO DE M√öSICAS ---
    console.log("\n--- ‚úÖ TESTE 1: CRIAR M√öSICAS ---");
    const musica1Data = {
      nome: "Sinfonia do C√≥digo",
      duracao: 240,
      genero: "Instrumental",
      album: "Compila√ß√£o de Sucessos",
      artistaId: artistaTeste.id,
    };
    await controller.criarMusica(musica1Data);

    const musica2Data = {
      nome: "Balada do Bug",
      duracao: 180,
      genero: "Eletr√¥nica",
      album: "Compila√ß√£o de Sucessos",
      artistaId: artistaTeste.id,
    };
    await controller.criarMusica(musica2Data);

    // --- 3. READ: TESTANDO A LEITURA DE DADOS ---
    console.log("\n--- ‚úÖ TESTE 2: LER M√öSICAS ---");
    console.log("\n‚û°Ô∏è Listando todas as m√∫sicas:");
    await controller.listarMusicas();

    // Para os pr√≥ximos passos, precisamos do ID de uma m√∫sica. Vamos busc√°-la.
    const musicaParaAtualizar = await prisma.musica.findFirst({
      where: { nome: "Sinfonia do C√≥digo" },
    });
    if (!musicaParaAtualizar) {
      throw new Error(
        "Falha ao encontrar a m√∫sica 'Sinfonia do C√≥digo' para testar."
      );
    }
    console.log(`\n‚û°Ô∏è Buscando m√∫sica pelo ID ${musicaParaAtualizar.id}:`);
    await controller.conseguirMusicaPorId(musicaParaAtualizar.id);

    console.log("\n‚û°Ô∏è Buscando m√∫sicas pelo nome 'Balada':");
    await controller.conseguirMusicasPorNome("Balada");

    // --- 4. UPDATE: TESTANDO A ATUALIZA√á√ÉO ---
    console.log("\n--- ‚úÖ TESTE 3: ATUALIZAR M√öSICA ---");
    console.log(
      `\n‚û°Ô∏è Atualizando o √°lbum da m√∫sica ID ${musicaParaAtualizar.id}...`
    );
    await controller.atualizarMusica(musicaParaAtualizar.id, {
      album: "Compila√ß√£o de Sucessos (Deluxe Edition)",
    });

    // --- 5. DELETE: TESTANDO A REMO√á√ÉO ---
    console.log("\n--- ‚úÖ TESTE 4: DELETAR M√öSICA ---");
    const musicaParaDeletar = await prisma.musica.findFirst({
      where: { nome: "Balada do Bug" },
    });
    if (!musicaParaDeletar) {
      throw new Error(
        "Falha ao encontrar a m√∫sica 'Balada do Bug' para testar."
      );
    }
    console.log(`\n‚û°Ô∏è Deletando a m√∫sica ID ${musicaParaDeletar.id}...`);
    await controller.deletarMusica(musicaParaDeletar.id);

    // --- 6. VERIFICA√á√ÉO FINAL ---
    console.log("\n--- ‚úÖ TESTE 5: VERIFICA√á√ÉO FINAL ---");
    console.log("\n‚û°Ô∏è Listando as m√∫sicas restantes ap√≥s as opera√ß√µes:");
    await controller.listarMusicas();
    await testarErros();
  } catch (error: any) {
    console.error(`\nüö® UM ERRO CR√çTICO OCORREU: ${error.message}`);
  } finally {
    // --- 7. CLEANUP: LIMPAR DADOS DE TESTE ---
    // √â uma boa pr√°tica remover os dados criados para n√£o sujar o banco de dados.
    console.log("\n[CLEANUP] Removendo dados de teste...");
    const artistaTeste = await prisma.artista.findFirst({
      where: { nome: "As M√°quinas Pensantes" },
    });
    if (artistaTeste) {
      // Primeiro deletamos as m√∫sicas associadas a este artista
      await prisma.musica.deleteMany({
        where: { artistaId: artistaTeste.id },
      });
      // Depois deletamos o artista
      await prisma.artista.delete({
        where: { id: artistaTeste.id },
      });
      console.log("‚úÖ Dados de teste removidos com sucesso.");
    }

    // Desconecta o cliente Prisma para que o script possa terminar.
    await prisma.$disconnect();
    console.log("\n--- üèÅ SCRIPT DE TESTE FINALIZADO ---");
  }
}

// Executa a fun√ß√£o principal
main();
