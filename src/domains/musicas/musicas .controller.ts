import { MusicService } from "./musicas .service";
import { Musica } from "@prisma/client";
const musicaService = new MusicService();

type dadosCriacaoMusica = Omit<Musica, "id">;
type dadosAtualizacaoMusica = Partial<Omit<Musica, "id" | "artistaId">>;

export class musicaController {
  async criarMusica(dadosParaCriar: dadosCriacaoMusica) {
    try {
      const novaMusica = await musicaService.criarMusica(dadosParaCriar);
      console.log("‚úÖ M√∫sica criada com sucesso:", novaMusica);
    } catch (error: any) {
      console.error(`‚ùå Erro ao criar m√∫sica: ${error.message}`);
    }
  }
  async listarMusicas() {
    try {
      const musicas = await musicaService.listarMusicas();
      if (musicas.length === 0) {
        console.log("\n‚ÑπÔ∏è Nenhuma m√∫sica encontrada.");
        return;
      }

      console.log("\n--- Lista de M√∫sicas ---");
      console.table(
        musicas.map((m) => ({
          ID: m.id,
          Nome: m.nome,
          Dura√ß√£o: m.duracao,
          G√™nero: m.genero,
          √Ålbum: m.album,
          Artista: m.artistaId,
        }))
      );
    } catch (error: any) {
      console.error(`\n‚ùå Erro ao listar m√∫sicas: ${error.message}`);
    }
  }

  async conseguirMusicaPorId(id: number) {
    try {
      const musica = await musicaService.conseguirMusicaPorId(id);
      console.log("\nüéµ M√∫sica Encontrada por ID:");
      console.log(musica);
    } catch (error: any) {
      console.error("\n‚ùå Erro ao listar m√∫sicas: ", error.message);
    }
  }

  async conseguirMusicasPorNome(nome: string) {
    try {
      const musicas = await musicaService.conseguirMusicasPorNome(nome);
      if (musicas.length === 0) {
        console.log(`\n‚ÑπÔ∏è Nenhuma m√∫sica encontrada com o termo "${nome}".`);
        return;
      }

      console.log(`\nüéµ M√∫sicas Encontradas com o termo "${nome}"`);
      console.table(
        musicas.map((m) => ({
          ID: m.id,
          Nome: m.nome,
          Dura√ß√£o: m.duracao,
          G√™nero: m.genero,
          √Ålbum: m.album,
          Artista: m.artistaId,
        }))
      );
    } catch (error: any) {
      console.error("\n‚ùå Erro ao bucas m√∫sicas: ", error.message);
    }
  }

  async atualizarMusica(
    id: number,
    dadosParaAtualizar: dadosAtualizacaoMusica
  ) {
    try {
      const musicaAtualizada = await musicaService.atualizaMusica(
        id,
        dadosParaAtualizar
      );
      console.log("‚úÖ M√∫sica atualizada com sucesso:", musicaAtualizada);
    } catch (error: any) {
      console.error(`‚ùå Erro ao atualizar m√∫sica: ${error.message}`);
    }
  }

  async deletarMusica(id: number) {
    try {
      const musicaDeletada = await musicaService.deletaMusica(id);
      console.log(
        `\n‚úÖ M√∫sica "${musicaDeletada.nome}" (ID: ${musicaDeletada.id}) foi removida com sucesso!`
      );
    } catch (error: any) {
      console.error(`\n‚ùå Erro ao remover m√∫sica: ${error.message}`);
    }
  }
}
